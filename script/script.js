document.addEventListener('DOMContentLoaded', () => {
    const gameBoard = document.getElementById('game-board');
    const movesCount = document.getElementById('moves-count');
    const scoreDisplay = document.getElementById('score');
    const timeDisplay = document.getElementById('time');
    const restartBtn = document.getElementById('restart-btn');
    const winMessage = document.getElementById('win-message');
    const difficultyButtons = document.querySelectorAll('.difficulty-btn');
    
    let cards = [];
    let flippedCards = [];
    let moves = 0;
    let score = 0;
    let matchedPairs = 0;
    let gameStarted = false;
    let timer = 0;
    let timerInterval;
    let difficulty = 'easy';
    
    // –°–∏–º–≤–æ–ª—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ (–ø–∞—Ä—ã) –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    const cardSymbols = {
        easy: ['üçé', 'üçå', 'üçá', 'üçä', 'üçì', 'üçâ'],
        medium: ['üçç', 'üçå', 'üçë', 'üçè', 'üç£', 'üåº', 'üçí', 'ü•ù'],
        hard: ['üçé', 'üçû', 'üçè', 'üå∑', 'üéÉ', 'üç¶', 'üåù', 'üåú', 'üå≥', 'üçÑ', 'ü••', 'üçã']
    };
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    difficultyButtons.forEach(btn => {
        btn.addEventListener('click', () => {
            difficultyButtons.forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            difficulty = btn.dataset.difficulty;
            initGame();
        });
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
    function initGame() {
        clearInterval(timerInterval);
        gameBoard.innerHTML = '';
        flippedCards = [];
        moves = 0;
        score = 0;
        matchedPairs = 0;
        timer = 0;
        gameStarted = false;
        movesCount.textContent = '0';
        scoreDisplay.textContent = '0';
        timeDisplay.textContent = '00:00';
        winMessage.style.display = 'none';
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        const symbols = cardSymbols[difficulty];
        cards = [...symbols, ...symbols];
        
        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
        shuffleCards();
        
        // –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        updateGridSize();
        
        // –°–æ–∑–¥–∞–µ–º HTML-—ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
        cards.forEach((symbol, index) => {
            const card = document.createElement('div');
            card.classList.add('card');
            card.dataset.symbol = symbol;
            card.dataset.index = index;
            
            const cardFront = document.createElement('div');
            cardFront.classList.add('card-front');
            cardFront.textContent = symbol;
            
            const cardBack = document.createElement('div');
            cardBack.classList.add('card-back');
            
            card.appendChild(cardFront);
            card.appendChild(cardBack);
            
            card.addEventListener('click', () => flipCard(card));
            gameBoard.appendChild(card);
        });
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Å–µ—Ç–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    function updateGridSize() {
        let columns;
        switch(difficulty) {
            case 'easy':
                columns = 4;
                break;
            case 'medium':
                columns = 4;
                break;
            case 'hard':
                columns = 6;
                break;
            default:
                columns = 4;
        }
        gameBoard.style.gridTemplateColumns = `repeat(${columns}, 1fr)`;
    }
    
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫
    function shuffleCards() {
        for (let i = cards.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [cards[i], cards[j]] = [cards[j], cards[i]];
        }
    }
    
    // –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
    function flipCard(card) {
        // –ï—Å–ª–∏ –∏–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        if (!gameStarted) {
            startTimer();
            gameStarted = true;
        }
        
        // –ï—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ —É–∂–µ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞ –∏–ª–∏ —É–∂–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–∞—Ä–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if (card.classList.contains('flipped') || flippedCards.length >= 2) {
            return;
        }
        
        // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        card.classList.add('flipped');
        flippedCards.push(card);
        
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ –¥–≤–µ –∫–∞—Ä—Ç–æ—á–∫–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if (flippedCards.length === 2) {
            moves++;
            movesCount.textContent = moves;
            
            setTimeout(checkMatch, 700);
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
    function checkMatch() {
        const [card1, card2] = flippedCards;
        
        if (card1.dataset.symbol === card2.dataset.symbol) {
            // –ö–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–≤–ø–∞–ª–∏
            card1.classList.add('matched');
            card2.classList.add('matched');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏
            addScore(100);
            
            matchedPairs++;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –∏–≥—Ä–∞
            if (matchedPairs === cardSymbols[difficulty].length) {
                // –ë–æ–Ω—É—Å –∑–∞ –±—ã—Å—Ç—Ä—É—é –∏–≥—Ä—É
                const timeBonus = Math.max(0, 1000 - timer * 5);
                addScore(timeBonus);
                
                // –ë–æ–Ω—É—Å –∑–∞ –º–∞–ª–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–¥–æ–≤
                const movesBonus = Math.max(0, 500 - moves * 10);
                addScore(movesBonus);
                
                endGame();
            }
        } else {
            // –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ —Å–æ–≤–ø–∞–ª–∏ - –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            card1.classList.remove('flipped');
            card2.classList.remove('flipped');
            card1.classList.add('shake');
            card2.classList.add('shake');
            
            // –£–±–∏—Ä–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ç—Ä—è—Å–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            setTimeout(() => {
                card1.classList.remove('shake');
                card2.classList.remove('shake');
            }, 300);
        }
        
        // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        flippedCards = [];
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    function addScore(points) {
        score += points;
        scoreDisplay.textContent = score;
        
        // –°–æ–∑–¥–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–∏–π —Ç–µ–∫—Å—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—á–∫–æ–≤
        const popup = document.createElement('div');
        popup.classList.add('score-popup');
        popup.textContent = `+${points}`;
        document.body.appendChild(popup);
        
        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∏ –∞–Ω–∏–º–∏—Ä—É–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–∏–π —Ç–µ–∫—Å—Ç
        const rect = gameBoard.getBoundingClientRect();
        popup.style.left = `${rect.left + rect.width/2}px`;
        popup.style.top = `${rect.top}px`;
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        setTimeout(() => {
            popup.style.opacity = '1';
            popup.style.transform = 'translateY(-30px)';
            
            // –£–¥–∞–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–∏–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
            setTimeout(() => {
                popup.remove();
            }, 1000);
        }, 10);
    }
    
    // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
    function startTimer() {
        clearInterval(timerInterval);
        timerInterval = setInterval(() => {
            timer++;
            const minutes = Math.floor(timer / 60).toString().padStart(2, '0');
            const seconds = (timer % 60).toString().padStart(2, '0');
            timeDisplay.textContent = `${minutes}:${seconds}`;
        }, 1000);
    }
    
    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
    function endGame() {
        clearInterval(timerInterval);
        winMessage.style.display = 'block';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        winMessage.innerHTML = `
            –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!<br>
            <div style="font-size: 1.2rem; margin-top: 10px;">
            –í—Ä–µ–º—è: ${timeDisplay.textContent}<br>
            –•–æ–¥—ã: ${moves}<br>
            –û—á–∫–∏: ${score}
            </div>
        `;
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    restartBtn.addEventListener('click', initGame);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    initGame();
});