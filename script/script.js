document.addEventListener('DOMContentLoaded', () => {
    const gameBoard = document.getElementById('game-board');
    const movesCount = document.getElementById('moves-count');
    const timeDisplay = document.getElementById('time');
    const restartBtn = document.getElementById('restart-btn');
    const winMessage = document.getElementById('win-message');

    let cards = [];
    let flippedCards = [];
    let moves = 0;
    let matchedPairs = 0;
    let gameStarted = false;
    let timer = 0;
    let timerInterval;

    // –°–∏–º–≤–æ–ª—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ (–ø–∞—Ä—ã)
    const cardSymbols = ['üçé', 'üçå', 'üçá', 'üçä', 'üçì', 'üçâ', 'üçí', 'ü•ù'];

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
    function initGame() {
        clearInterval(timerInterval);
        gameBoard.innerHTML = '';
        flippedCards = [];
        moves = 0;
        matchedPairs = 0;
        timer = 0;
        gameStarted = false;
        movesCount.textContent = '0';
        timeDisplay.textContent = '00:00';
        winMessage.style.display = 'none';

        // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã –∫–∞—Ä—Ç–æ—á–µ–∫
        cards = [...cardSymbols, ...cardSymbols];

        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
        shuffleCards();

        // –°–æ–∑–¥–∞–µ–º HTML-—ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
        cards.forEach((symbol, index) => {
            const card = document.createElement('div');
            card.classList.add('card');
            card.dataset.symbol = symbol;
            card.dataset.index = index;

            const cardFront = document.createElement('div');
            cardFront.classList.add('card-front');
            cardFront.textContent = symbol;

            const cardBack = document.createElement('div');
            cardBack.classList.add('card-back');

            card.appendChild(cardFront);
            card.appendChild(cardBack);

            card.addEventListener('click', () => flipCard(card));
            gameBoard.appendChild(card);
        });
    }

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫
    function shuffleCards() {
        for (let i = cards.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [cards[i], cards[j]] = [cards[j], cards[i]];
        }
    }

    // –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
    function flipCard(card) {
        // –ï—Å–ª–∏ –∏–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        if (!gameStarted) {
            startTimer();
            gameStarted = true;
        }

        // –ï—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ —É–∂–µ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞ –∏–ª–∏ —É–∂–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–∞—Ä–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if (card.classList.contains('flipped') || flippedCards.length >= 2) {
            return;
        }

        // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        card.classList.add('flipped');
        flippedCards.push(card);

        // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ –¥–≤–µ –∫–∞—Ä—Ç–æ—á–∫–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if (flippedCards.length === 2) {
            moves++;
            movesCount.textContent = moves;

            setTimeout(checkMatch, 700);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
    function checkMatch() {
        const [card1, card2] = flippedCards;

        if (card1.dataset.symbol === card2.dataset.symbol) {
            // –ö–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–≤–ø–∞–ª–∏
            card1.style.visibility = 'hidden';
            card2.style.visibility = 'hidden';
            matchedPairs++;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –∏–≥—Ä–∞
            if (matchedPairs === cardSymbols.length) {
                endGame();
            }
        } else {
            // –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ —Å–æ–≤–ø–∞–ª–∏ - –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            card1.classList.remove('flipped');
            card2.classList.remove('flipped');
        }

        // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        flippedCards = [];
    }

    // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
    function startTimer() {
        clearInterval(timerInterval);
        timerInterval = setInterval(() => {
            timer++;
            const minutes = Math.floor(timer / 60).toString().padStart(2, '0');
            const seconds = (timer % 60).toString().padStart(2, '0');
            timeDisplay.textContent = `${minutes}:${seconds}`;
        }, 1000);
    }

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
    function endGame() {
        clearInterval(timerInterval);
        winMessage.style.display = 'block';
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    restartBtn.addEventListener('click', initGame);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    initGame();
});
